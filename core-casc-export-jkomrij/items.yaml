removeStrategy:
  rbac: SYNC
  items: NONE
items:
- kind: pipeline
  name: agent-label
  concurrentBuild: true
  definition:
    cpsFlowDefinition:
      sandbox: true
      script: |-
        pipeline {
            agent {
                kubernetes {
                    label 'docker-label' // Use the label you set in the pod template
                    defaultContainer 'docker-container' // Use the container name you defined
                }
            }
            stages {
                stage('Hello') {
                    steps {
                        echo 'Hello World'
                    }
                }
            }
        }
  description: ''
  disabled: false
  displayName: agent-label
  resumeBlocked: false
- kind: pipeline
  name: discarder
  concurrentBuild: true
  definition:
    cpsFlowDefinition:
      sandbox: true
      script: |
        pipeline {
            agent any

            stages {
                stage('Hello') {
                    steps {
                        echo 'Hello World'
                    }
                }
            }
        }
  description: ''
  disabled: false
  displayName: discarder
  properties:
  - buildDiscarder:
      strategy:
        logRotator:
          artifactDaysToKeep: 1
          artifactNumToKeep: 2
          daysToKeep: 14
          numToKeep: 21
  resumeBlocked: false
- kind: pipeline
  name: download-logs
  concurrentBuild: true
  definition:
    cpsFlowDefinition:
      sandbox: true
      script: "pipeline {\n    agent {\n        kubernetes {\n            inheritFrom\
        \ 'docker-label' // Specify the label of your Kubernetes pod template\n  \
        \          defaultContainer 'jnlp' // Use the default JNLP container provided\
        \ by Jenkins\n        }\n    }\n    \n    stages {\n        stage('Hello')\
        \ {\n            steps {\n                echo 'Hello World'\n           \
        \ }\n        }\n    }\n    \n    post {\n        always {\n            script\
        \ {\n                def logFilePath = \"^${JENKINS_HOME}/jobs/^${JOB_NAME}/builds/^${BUILD_NUMBER}/log\"\
        \n                sh \"cp ^${logFilePath} ^${WORKSPACE}/console.log\"\n  \
        \          }\n        }\n    }\n}\n"
  description: ''
  disabled: false
  displayName: download-logs
  resumeBlocked: false
- kind: folder
  name: drip
  description: ''
  displayName: drip
  properties:
  - envVars: {}
  - itemRestrictions:
      filter: false
- kind: pipeline
  name: githubTrigger
  concurrentBuild: true
  definition:
    cpsScmFlowDefinition:
      scriptPath: Jenkinsfile
      scm:
        scmGit:
          userRemoteConfigs:
          - userRemoteConfig:
              credentialsId: jkomrij_ci
              url: https://github.com/goobed/triggered.git
          branches:
          - branchSpec:
              name: '*/main'
      lightweight: true
  description: ''
  disabled: false
  displayName: githubTrigger
  properties:
  - pipelineTriggers:
      triggers:
      - githubPush: {}
  resumeBlocked: false
- kind: pipeline
  name: long_laster
  concurrentBuild: true
  definition:
    cpsFlowDefinition:
      sandbox: true
      script: |
        pipeline {
            agent any

            stages {
                stage('Sleep') {
                    steps {
                        echo "Finna sleep now.."
                        sleep(time: 5, unit: "MINUTES")
                    }
                }
            }
        }
  description: ''
  disabled: false
  displayName: long_laster
  resumeBlocked: false
- kind: folder
  name: pch-folder
  description: ''
  displayName: pch-folder
  items:
  - kind: pipeline
    name: pch-01-sleep
    concurrentBuild: false
    definition:
      cpsFlowDefinition:
        sandbox: true
        script: sleep 240
    description: ''
    disabled: false
    displayName: pch-01-sleep
    resumeBlocked: false
  properties:
  - envVars: {}
  - itemRestrictions:
      filter: false
- kind: pipeline
  name: ranges
  concurrentBuild: true
  definition:
    cpsFlowDefinition:
      sandbox: true
      script: |-
        def call(){
           String response = []
           String props = []
           response = httpRequest(
                            url: 'https://someurl/api/v2.0/projects/myproject/repositories/echo/artifacts',
                            httpMode: 'GET',
                            acceptType: 'APPLICATION_JSON',
                            contentType: 'APPLICATION_JSON',
                            customHeaders: [[name: 'Authorization', value: "Bearer secret"]]
                          )

                props = readJSON text: response
                props.each { item ->
                    if  (item.tags){
                        item.tags.each { tag ->
                            println("^${tag.name}")
                        }
                    }
                }
        }
  description: ''
  disabled: false
  displayName: ranges
  resumeBlocked: false
- kind: freeStyle
  name: tester1
  blockBuildWhenDownstreamBuilding: false
  blockBuildWhenUpstreamBuilding: false
  builders:
  - batchFile:
      command: tester.bat
  concurrentBuild: false
  customWorkspace: /var/jenkins_home/tester
  description: ''
  disabled: false
  displayName: tester1
  scm:
    none: {}
  scmCheckoutStrategy:
    standard: {}
